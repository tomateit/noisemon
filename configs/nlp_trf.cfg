[paths]
train = null
dev = null
raw = null


[system]
seed = 69523
gpu_allocator = null

[nlp]
lang = "ru"
pipeline = ["transformer", "entity_recognizer"]
disabled = []
before_creation = null
after_creation = null
after_pipeline_creation = null
tokenizer = {"@tokenizers":"spacy.Tokenizer.v1"}
batch_size = 20

[components]


# ----------------------------- Transformer
[components.transformer]
factory = "transformer"
max_batch_items = 512

[components.transformer.model]
@architectures = "spacy-transformers.TransformerModel.v1"
name = "cointegrated/LaBSE-en-ru"

[components.transformer.model.get_spans]
@span_getters = "transformer_aware_strided_spans.v1"
window = 450
stride = 200
tokenizer_name = "cointegrated/LaBSE-en-ru"

[components.transformer.model.tokenizer_config]
use_fast = true


# ----------------------------- NER

[components.entity_recognizer]
# factory = "my_ner_model.v1"
# incorrect_spans_key = null
factory = "ner"
moves = null
update_with_oracle_cut_size = 100



[components.entity_recognizer.model]
# Identical to spacy.TransitionBasedParser.v2 except the use_upper was set to True by default.
@architectures = "spacy.TransitionBasedParser.v2"
# Which task to extract features for. Possible values are “ner” and “parser”. 
state_type = "ner"
# Whether to use an expanded feature set when extracting the state tokens. Slightly slower, but sometimes improves accuracy slightly. 
extra_state_tokens = false
hidden_width = 256
maxout_pieces = 5
use_upper = false
nO = null

[components.entity_recognizer.model.tok2vec]
@architectures = "spacy-transformers.TransformerListener.v1"
# All listeners' errors are backpropagated, you can set the wheight for that
grad_factor = 1.0
upstream = "transformer"
# The TransformerListener layer expects a pooling layer as the argument pooling, 
# which needs to be of type Model[Ragged, Floats2d]. 
# This layer determines how the vector for each spaCy token 
# will be computed from the zero or more source rows the token is aligned against.
# pooling = {"@layers":"reduce_mean.v1"}
[components.entity_recognizer.model.tok2vec.pooling]
@layers = "reduce_mean.v1"



[initialize]
vectors = null
init_tok2vec = null
vocab_data = null
lookups = null

[initialize.components]

[initialize.tokenizer]


[corpora]

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[training]
train_corpus = "corpora.train"
dev_corpus = "corpora.dev"
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
dropout = 0.15
# Controls early-stopping. 0 disables early stopping.
patience = 100000
eval_frequency = 600
accumulate_gradient = 1
max_epochs = 0
max_steps = 10000
annotating_components = []
frozen_components = []
before_to_disk = null

[training.logger]
@loggers = "spacy.ConsoleLogger.v1"
progress_bar = false


# [training.batcher]
# @batchers = "spacy.batch_by_words.v1"
# discard_oversize = false
# tolerance = 0.2
# get_length = null

# [training.batcher.size]
# @schedules = "compounding.v1"
# start = 100
# stop = 1000
# compound = 1.001
# t = 0.0

[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 0.00000001
learn_rate = 0.0005

[training.score_weights]
ents_f = 1.0
ents_p = 0.0
ents_r = 0.0

[pretraining]

# [optimizer]
# @optimizers = "Adam.v1"
# learn_rate = 0.001
# beta1 = 0.9
# beta2 = 0.999
# L2 = 0.0
# eps = 0.00000001
# grad_clip = 1.0
# L2_is_weight_decay = true
# use_averages = true